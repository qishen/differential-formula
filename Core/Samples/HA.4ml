domain ODE
{
	UnaryTerm ::= Neg + Sin + Cos + Exp + Sqrt.
	BinaryTerm ::= Add + Sub + Mul + Div.
	Term ::= Var + Real + Const + UnaryTerm + BinaryTerm + Pow.
	
	// Differential equation (dx/dt = rhs)
	DiffEq ::= new (x:Var, rhs:Term).
	
	// Variable
	Var  ::= new (name: String).

	// A real constant
	Const ::= new (value: Real).
	
	// Unary operations
	Neg  ::= new (arg1: any Term).
	Sin  ::= new (arg1: any Term).
	Cos  ::= new (arg1: any Term).
	Exp  ::= new (arg1: any Term).
	Sqrt ::= new (arg1: any Term).
	
	// Binary operations
	Add  ::= new (arg1: any Term, arg2: any Term).
	Sub  ::= new (arg1: any Term, arg2: any Term).
	Mul  ::= new (arg1: any Term, arg2: any Term).
	Div  ::= new (arg1: any Term, arg2: any Term).
	
	// Power function
	Pow  ::= new (arg1: any Term, k: Integer).
}

domain SpaceEx extends O::ODE
{
	Component ::= BaseComponent + NetworkComponent.

	BaseComponet ::= new (id: String).
	NetworkComponent ::= new (id: String)

	Location ::= new (flow: O.Term, initial: String, invariant: String, component: BaseComponent).
	Transition ::= new (src: Location, dst: Location, reset: String, guard: String).
}

domain CIL extends O::ODE
{
	Identifier ::= new (name: String).
	Location ::= new (id: Identifier, elems: LocationElements).
	LocationElement ::= Initial + Equation + Marked.
	LocationElements ::= new (elem: LocationElement, nxt: any LocationElements + {NIL})

}