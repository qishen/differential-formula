domain Hello {
   Hi ::= new (id: Integer).
   Hi(b) :- Hi(a), b = a + 1, b < 10.
}

domain Digraphs extends Hello
{
   V ::= new (lbl: Integer).
   E ::= new (src: V, dst: V).
   Thing ::= V + E.
}

domain Digraphs2 includes Hello
{
   V ::= new (lbl: Integer).
   E ::= new (src: V, dst: V).
   Thing ::= V + E.
}

domain DAGs extends Digraphs
{
   SomeEnum ::= { 1..3 }.
   path ::= new (V + SomeEnum, V).
   path(u, w) :- E(u, w); E(u, v), path(v, w).  
   conforms no path(u, u).
}

transform SimpleCopy (id: Integer, GraphIn:: DAGs) returns (GraphOut:: DAGs) {
   GraphOut.V(y) :- GraphIn.V(x), y = x + %id.
   GraphOut.E(x, y) :- GraphIn.E(x, y).
}

transform SpecialCopy (v: GraphIn.V, GraphIn:: DAGs) returns (GraphOut:: DAGs) {
   GraphOut.V(x) :- GraphIn.V(x), x = v.
   GraphOut.E(x, y) :- GraphIn.E(x, y).
}


domain TwoDAGs extends left:: DAGs, right:: DAGs {
   CrossThing ::= left.Thing + right.Thing.
   CrossE ::= new (src: left.V, dst: right.V).
   SomeEnumWrapper ::= new (content: left.SomeEnum + right.SomeEnum).

   CrossE(a, d), CrossE(b, c) :- left.E(a, b), right.E(c, d).
   
}

domain TwoDAGsProduct extends up:: TwoDAGs, down:: TwoDAGs {
   iamhere :- up.left.E(a, b).
}

model m1 of Digraphs
{
   Hi(5).
}

model m2 of Digraphs
{
   Hi(5).
}

model m3 of DAGs {
   v1 is V(1).
   v2 is V(2).
   e1 is E(v1, v2).
}

model m4 of TwoDAGs extends left:: m3, right:: m3 {
   //left.V(1).
}

model m5 of TwoDAGsProduct includes up:: m4, down:: m4 {
   up.left.V(1).
}