domain Hello 
{
   Hi ::= new (id: Integer).
   Hi(b) :- Hi(a), b = a + 1, b < 10 .
}

domain Digraphs extends Hello
{
   V ::= new (lbl: Integer).
   E ::= new (src: V, dst: V).
   Thing ::= V + E.
}

domain DAGs extends Digraphs
{
   //SomeEnum ::= { 1..3 }.
   //path ::= new (V + SomeEnum, V).

   path ::= new (V, V).
   path(u, w) :- E(u, w).
   path(u, w) :- E(u, v), path(v, w).

   //path(u, w) :- E(u, w); E(u, v), path(v, w).  
   //conforms no path(u, u).
}

domain TwoDAGs extends left:: DAGs, right:: DAGs {
   CrossThing ::= left.Thing + right.Thing.
   CrossE ::= new (src: left.V, dst: right.V).
   //SomeEnumWrapper ::= new (content: left.SomeEnum + right.SomeEnum).

   //CrossE(a, d), CrossE(b, c) :- left.E(a, b), right.E(c, d).
   
}

transform SpecialCopy (v: GraphIn.V, GraphIn:: DAGs) returns (GraphOut:: DAGs) {
   GraphOut.V(x) :- GraphIn.V(x).
   GraphOut.E(x, y) :- GraphIn.E(x, y).
}

model h of Hello {
    h1 is Hi(3).
    Hi(4).
}

model g of Digraphs includes h {
    v1 is V(1).
    v2 is V(2).
    e1 is E(v1, v2).
}

model g2 of DAGs extends g {
    v3 is V(3).
}

model g3 of DAGs extends h, g {
    v3 is V(3).
}

model g4 of TwoDAGs extends left:: g2, right:: g2 {
    l100 is left.V(100).
    r100 is right.V(100).
}
EOF
--------
domain Graph {
    Node ::= new(name: Integer).
    Edge ::= new(src: Node, dst: Node).
    Path ::= new(src: Node, dst: Node).
    Line ::= new(a: Node, b: Node, c: Node, d: Node).
    Nocycle ::= new(node: Node).
    TwoEdge ::= new(first: Edge, second: Edge).

    TwoEdge(x, x, square) :- x is Edge(c, d), 
    aggr = count({Edge(a, a), b | Edge(a, b)}), square = aggr * aggr, agg.hi * 2 = 20 .
}

model m of Graph {
    n0 is Node(0).
    n1 is Node(1).
    n2 is Node(2).
    n3 is Node(3).
    n4 is Node(4).

    Edge(n0, n0).
    Edge(n0, n1).
    Edge(n1, n2).
    Edge(n2, n3).
    Edge(n3, n4).
}
EOF