domain Graph {
    MyEnum ::= {2, 3, "hi"} + Node + Edge.
    Union ::= Node + Edge.
    Node ::= new(name: Integer + String).
    Edge ::= new(src: Node, dst: Node).
    Path ::= new(src: Node, dst: Node).
    Line ::= new(a: Node, b: Node, c: Node, d: Node).

    Nocycle ::= new(node: Node).
    TwoEdge ::= new(first: Edge, second: Edge).

    Hello :- Edge(x, y).
    Hello2 :- Edge(c, d), count({ e | e is Edge(a, b)}) = 6 .
    Goodbye :- Edge(x, y), Hello .
    Path(x, y) :- Edge(x, y).
    Path(x, z) :- Path(x, y), Path(y, z).
}

transform Add (id: Integer, GraphIn:: Graph) 
returns (GraphOut:: Graph)
{
    Thing ::= GraphIn.Node + GraphOut.Node + {1, 2, "hi"} + GraphIn.Edge.
    GraphOut.Node(%id).
    GraphOut.Node(x) :- GraphIn.Node(x).
    GraphOut.Edge(x, y) :- GraphIn.Edge(x, y).
}

model m of Graph {
    n0 is Node(0).
    n1 is Node(1).
    n2 is Node(2).
    n3 is Node(3).
    n4 is Node(4).

    Edge(n0, n0).
    Edge(n0, n1).
    Edge(n1, n2).
    Edge(n2, n2).
    Edge(n2, n3).
    Edge(n3, n4).
}