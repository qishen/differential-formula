domain Graph
{
    Node ::= new (id: String).
    Edge ::= new (src: Node, dst: Node).

    hop ::= (src: Node, dst: Node).
    tri_hop ::= (src: Node, dst: Node).
    quad_hop ::= (src: Node, dst: Node).
    seven_hop ::= (src: Node, dst: Node).

    hop(x,z) :- Edge(x,y), Edge(y,z).
    tri_hop(a,d) :- Edge(a,b), Edge(b,c), Edge(c,d).
    quad_hop(e,i) :- Edge(e,f), Edge(f,g), Edge(g,h), Edge(h,i).
    seven_hop(m,n) :- tri_hop(m,k), quad_hop(k,n).
}

domain HierarchicalGraph extends Graph
{
    NodeSet ::= new (cur: any Node + HyperNode, nxt: any NodeSet + {NIL}).
    HyperNode ::= new (item: any NodeSet + Node).
    HyperEdge ::= new (src: any Node + HyperNode, dst: any Node + HyperNode).
}


model g of Graph
{

}

model hg of HierarchicalGraph
{

}

model hg_example of HierarchicalGraph
{
    n1 is Node("n1").
    n2 is Node("n2").
    n3 is Node("n3").
    e1 is Edge(n1, n2).
    e2 is Edge(n2, n3).
    s1 is NodeSet(n1, NodeSet(n2, NodeSet(n3, NIL))).
    h1 is HyperNode(s1).

    n4 is Node("n4").
    n5 is Node("n5").
    e3 is Edge(n4, n5).
    s2 is NodeSet(n4, NodeSet(n5, NIL)).
    h2 is HyperNode(s2).

    n6 is Node("n6").

    he1 is HyperEdge(h1, h2).
    he2 is HyperEdge(h1, n6).

}