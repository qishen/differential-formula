import vec
import langs::lib::list
import langs::lib::operators

/*****************************************/
/******* DDLog Language Meta-model *******/
/*****************************************/
typedef DDField = DDField { field_name: string, type_spec: Ref<DDTypeSpec> }
typedef DDTypeCons = DDTypeCons { cons_name: string, fields: List<DDField> }
typedef DDTypeSpec = BigInt | 
					 Bool | 
					 Str | 
					 Bitvector | 
					 Int | 
					 Double | 
					 Float | 
					 // (T1, T2, ..., Tn)
					 DDTupleTypeSpec { name: string, tuple: NonNullList<Ref<DDTypeSpec>> } |
					 // T1 {..} | T2 {..} | ... | Tn {..}
					 DDUnionTypeSpec { name: string, types: NonNullList<DDTypeCons> }

// There are more term types defined in the DDlog language reference but we only need a few
// https://github.com/vmware/differential-datalog/blob/master/doc/language_reference/language_reference.md
typedef DDTerm = DDBigInt { i0: bigint } | DDBool { i1: bool } | DDStr { i2: string } |
				 DDBitvector { i3: bit<64> } | DDInt { i4: signed<64> } | 
				 DDDouble { i5: double} | DDFloat { i6: float } | 
				 // A variable term in ddlog represented by a string
				 DDVar { name: string } | 
				 // var xxx = .., add keyword in the front to denote it is only for declaration
				 DDVarDecl { name: string} | 
				 // It has type name and a list of DDlog expressions
				 DDCons { cons_name: string, arguments: List<DDExpr> } 
				 // TODO: Add function term for aggregation

// DDRelation represents a collection of records of certain type
typedef DDRelation = DDRelation { is_input: bool, name: string, type_spec: DDTypeSpec } 

// There are more expression in DDlog referene and we only pick a few we need
typedef DDExpr =  DDTermExpr { term: Ref<DDTerm> } | 
				  // A tuple of DDExpr as (e1, e2, ..., en)
				  DDTupleExpr { exprs: Vec<Ref<DDExpr>> } |
				  // Function call as `func(arguments)`
				  DDFunctionCallExpr { func: Ref<DDExpr>, arguments: Vec<Ref<DDExpr>> } |
				  // Function call on an object as `a.call(arguments)`
				  DDDotFunctionCallExpr { obj: Ref<DDExpr>, func_name: string, arguments: Vec<Ref<DDExpr>> } |
				  // Access struct field by identifier like `list.node`	
				  DDTermFieldExpr { expr: Ref<DDExpr>, field: string } |
				  // Unary operator over expression
				  DDUnaryExpr { expr: Ref<DDExpr>, uop: UnaryOp } |
				  // Arithmetic operator over two expressions
				  DDArithExpr { left: Ref<DDExpr>, right: Ref<DDExpr>, aop: ArithOp } |
				  // Binary operator over two expressions
				  DDBinExpr { left: Ref<DDExpr>, right: Ref<DDExpr>, bop: BinOp }

// The complete form of DDlog predicate is `u in RelName[Term]` to represent predicate constraint
typedef DDAtom = DDAtom { var_name: Option<string>, rel: Ref<DDRelation>, expr: DDExpr }
typedef DDRhs = DDRhsAtom { negated: bool, atom: DDAtom } |
			  	DDRhsCondition { expr: DDExpr } |
			  	DDRhsAssignment { to: DDExpr, from: DDExpr } |
				// TODO: `SetOp` could be replaced or extended by a customized aggregation function
				// if the default set comprehension operators are not flexible enough
				// `DDGroup` could be viewed as a special case of `DDRhsAssignment`
				DDGroup { var_name: string, group: DDExpr, by: DDExpr }

typedef DDRule = DDRule { head: Vec<DDAtom>, body: Vec<DDRhs> }

/********** Relations ***********/
output relation DDTypeSpec [DDTypeSpec]
output relation DDTermOfDDTypeSpec [(DDTerm, DDTypeSpec)]
output relation DDRelation [DDRelation]
output relation DDRule [DDRule]

// Print out only the type alias or type name in DDLog
function type_alias(type_spec: DDTypeSpec): string {
	match (type_spec) {
		BigInt -> { "bigint" },
		Bool -> { "bool" },
		Str -> { "string" },
		Bitvector -> { "bit<64>" },
		Int -> { "usize" },
		Double -> { "double" },
		Float -> { "float" },
		DDTupleTypeSpec { name, _ } -> { name },
		DDUnionTypeSpec { name, _ } -> { name },
	}
}

// Print out complete type definition in DDLog
function to_string(cons: DDTypeCons): string {
	var cons_name = cons.cons_name;
	var fields = cons.fields;
	var field_vec = into_vec(fields);
	var fields_str = field_vec.map(|field| { 
		field.field_name ++ ": " ++ type_alias(deref(field.type_spec))
	}).join(", ");	
	cons_name ++ "{" ++ fields_str ++ "}"
}

// The complete type defintion in string format
function to_string(type_spec: DDTypeSpec): string {
	match (type_spec) {
		BigInt -> { "BigInt" },
		Bool -> { "Bool" },
		Str -> { "String" },
		Bitvector -> { "Bitvector" },
		Int -> { "Int" },
		Double -> { "Double" },
		Float -> { "Float" },
		DDTupleTypeSpec { name, tuple } -> { 
			var types = tuple;
			var type_vector = into_nonnull_vec(types);
			var tuple_str = type_vector.map(|t_ref| type_alias(deref(t_ref))).join(", ");
			"typedef" ++ name ++ " = (" ++ tuple_str ++ ")"
		},
		DDUnionTypeSpec { name, types } -> { 
			var subtypes = types;
			var cons_vector = into_nonnull_vec(subtypes); 
			var cons_str = cons_vector.map(|cons| to_string(cons)).join(" | ");
			"typedef " ++ name ++ " = " ++ cons_str
		},
	}
}

function to_string(term: DDTerm): string {
	match (term) {
		DDBigInt { bigint_val } -> { to_string(bigint_val) },
		DDBool { b } -> { to_string(b) },
		DDStr { str } -> { str },
		DDBitvector { bv } -> { to_string(bv) },
		DDInt { i } -> { to_string(i) },
		DDDouble { d } -> { to_string(d) },
		DDFloat { f } -> { to_string(f) },
		DDVar { var_name } -> { var_name },
		DDVarDecl { var_name } -> { "var " ++ var_name },
		DDCons { cons_name, args } -> {
			var arguments = args;
			var arg_vec = into_vec(arguments);
			var args_str = arg_vec.map(|x| to_string(x)).join(", ");
			cons_name ++ "{" ++ args_str ++ "}"
		},
	}
}

function to_string(rel: DDRelation): string {
	var keyword = match (rel.is_input) {
		true -> "input",
		false -> "output",
	};
	keyword ++ " relation " ++ rel.name ++ "[" ++ type_alias(rel.type_spec) ++ "]"
}

function to_string(expr: DDExpr): string {
	match (expr) {
		DDTermExpr { term_ref } -> { to_string(deref(term_ref)) },
		DDTupleExpr { exprs } -> {
			var exprs_str = exprs.map(|x| to_string(deref(x))).join(", "); 
			"(" ++ exprs_str ++ ")"
		},
		DDFunctionCallExpr { expr, args } -> {
			var args_str = args.map(|x| to_string(deref(x))).join(", "); 
			to_string(deref(expr)) ++ "(" ++ args_str ++ ")"
		},
		DDDotFunctionCallExpr { obj, func_name, arguments } -> {
			var args_str = arguments.map(|x| to_string(deref(x))).join(", ");
			to_string(deref(obj)) ++ "." ++ func_name ++ "(" ++ args_str ++ ")"
		},
		DDTermFieldExpr { expr, field } -> { to_string(deref(expr)) ++ "." ++ field },
		DDUnaryExpr { expr, uop } -> { to_string(uop) ++ " " ++ to_string(deref(expr)) },
		DDArithExpr { left, right, aop } -> {
			"(" ++ to_string(deref(left)) ++ " " ++ to_string(aop) ++ " " ++ to_string(deref(right)) ++ ")"
		},
		DDBinExpr { left, right, bop } -> {
			to_string(deref(left)) ++ " " ++ to_string(bop) ++ " " ++ to_string(deref(right))
		},
	}
}

function to_string(atom: DDAtom): string {
	var atom_str = deref(atom.rel).name ++ "[" ++ to_string(atom.expr) ++ "]";
	match (atom.var_name) {
		Some { var_name } -> { var_name ++ " in " ++ atom_str },
		None -> { atom_str }
	}
}

function to_string(rhs: DDRhs): string {
	match (rhs) {
		DDRhsAtom { negated, atom } -> {
			if (negated) {
				"not " ++ to_string(atom)
			} else {
				to_string(atom)
			}
		},
		DDRhsCondition { expr } -> to_string(expr),
		DDRhsAssignment { to, from } -> to_string(to) ++ " = " ++ to_string(from),
		DDGroup { var_name, group, by } -> {
			"var " ++ var_name ++ " = " ++ to_string(group) ++ ".group_by(" ++ to_string(by) ++ ")"
		}
	}
}

function to_string(rule: DDRule): string {
	var head_str = rule.head.map(|x| to_string(x)).join(", ");
	var body_str = rule.body.map(|x| to_string(x)).join(", ");
	head_str ++ " :- " ++ body_str ++ "."
}


/******************** Helper Functions *****************/

function is_primitive_ddtype(ddtype: DDTypeSpec): bool {
	match (ddtype) {
		DDTupleTypeSpec {_, _} -> false,
		DDUnionTypeSpec {_, _} -> false,
		_ -> true
	}
}

function ddterm_to_ddatom(var_name: Option<string>, rel: Ref<DDRelation>, dd_term: DDTerm): DDAtom {
	var dd_term_expr = DDTermExpr { ref_new(dd_term) };
	var dd_atom = DDAtom { var_name, rel, dd_term_expr };
	dd_atom
}

// Translate a DDTerm `Pred(..)` into a DDRhs such as `not x in Relation[Pred(..)]`
// given some parameters. Relation must have the same type as current DDTerm
function ddterm_to_ddrhs(
	var_name: Option<string>, 
	rel: Ref<DDRelation>, 
	dd_term: DDTerm, 
	negated: bool
): DDRhs {
	var dd_term_expr = DDTermExpr { ref_new(dd_term) };
	var dd_atom = DDAtom { var_name, rel, dd_term_expr };
	DDRhsAtom { negated, dd_atom }
}

function atom_term_type(term: DDTerm): Option<DDTypeSpec> {
	match (term) {
		DDBigInt {_} -> { Some{BigInt} },
		DDBool {_} -> { Some{Bool} },
		DDStr {_} -> { Some{Str} },
		DDBitvector {_} -> { Some{Bitvector} },
		DDInt {_} -> { Some{Int} },
		DDDouble {_} -> { Some{Double} },
		DDFloat {_} -> { Some{Float} },
		_ -> None 
	}
}

function union_of_ddtypes(union_name: string, types: Vec<DDTypeSpec>): DDTypeSpec {
	// typedef T1 = T11 {..} | T12 {..}
	// typedef T2 = T21 {..} | T22 {..}
	// typedef U = U_T1 { t1_field: T1 } | U_T2 { t2_field: T2 } 
	var constructors = vec_empty();
	for (t in types) {
		// Use the type name in lowercase as its field name
		var type_name = type_alias(t);
		// Add "_field" at the end in case the type name is a reserved work like `float`
		var field_name = to_lowercase(type_name) ++ "_field";
		var cons_name = union_name ++ "_" ++ type_name;
		var field = DDField { field_name, ref_new(t) };
		var constructor = DDTypeCons { cons_name, from_singleton_to_list(field) };
		constructors.push(constructor);
	};
	DDUnionTypeSpec { union_name, from_nonnull_vec(constructors).unwrap_or_default() }
}
