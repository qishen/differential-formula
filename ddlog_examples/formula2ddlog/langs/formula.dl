import langs::lib::list
import langs::lib::operators
import vec
import hashset
import print

/***********************************************/
/******* FORMULA 2.0 Language Meta-model *******/
/***********************************************/

// There are some restrictions on the field name for each variant that they have to be unique
typedef Term =  AtomStr { i0: string } | AtomInt { i1: signed<64> } | AtomPosInt { i2: signed<64> } |
				AtomNegInt { i3: signed<64> } | AtomFloat { i4: float } | AtomBool { i5: bool } |
			    Variable { root: string, fragments: Vec<string> } |
				// Constant can be viewed as Composite term without arguments
				Composite { name: string, arguments: List<Ref<Term>> }

// TODO: Field name is actually optional
typedef Field = Field { field_name: string, type_spec: TypeSpec }
typedef TypeSpec =  Integer | Boolean | FloatNum | String |
					CompositeType { name: string, arguments: Vec<Field> } |
					UnionType { name: string, subtypes: Vec<TypeSpec> } |
					EnumType {name: string, items: Vec<Term>} |
					// ConstantType is a CompositeType without arguments
					ConstantType {constant: string} 

// The head terms and conditions are the same as head and body in a rule so the set 
// comprehension can be viewed as a rule and set comprehension is applied to the set
// of derived terms
typedef Setcompre = Setcompre { rule: Ref<Rule>, sop: SetOp, default: Term }
typedef Expr =  BaseExpr { term: Term } | 
				SetcompreExpr { sc: Ref<Setcompre> } |
				UnaryExpr { expr: Ref<Expr>, uop: UnaryOp } |
				ArithExpr { left: Ref<Expr>, right: Ref<Expr>, aop: ArithOp }

// Constraints are either predicates or expressions that may contain set comprehension	
// `ExprCons` could be 
// 1) a binary constraint over two expressions. 
// 2) An assignment that holds the result of the evaluation of right hand side expression.
// 3) Type constraint in the form of `var: Type`
typedef Constraint = PredCons { negated: bool, term: Term, alias: Option<string> } | 
					 BinaryCons { left: Expr, right: Expr, bop: BinOp } |
					 AssignCons { variable: Term, expr: Expr } | 
					 TypeCons { variable: Term, var_type: TypeSpec }

typedef AnyTypeConversionEnum = ToAny | FromAny | NoConversion

// A rule is composed by a linked list of head terms and a linked list of constraints
// Rule has at least one constraint and at least one head term otherwise the rule is meaningless
// The term in the head could be ground term and only count once in the set
typedef Rule = Rule { id: string, head: NonNullList<Term>, body: NonNullList<Constraint> }
typedef Domain = Domin { typedefs: List<TypeSpec>, rules: List<Rule> }
typedef Model = Model { terms: List<Term>}
typedef Transform = Transform {}


/****************** Relations *******************/
input relation TypeSpec [TypeSpec]
input relation InputTerm [Term]
output relation Term [Term]
// A helper relation to infer the type of variables in Formula term but also for every subterm 
// in the arguments of a term. The first term is the argument and the second term is the term
// that contains the first term as (subterm, term, the type of subterm)
output relation SubtermTypeSpec [(Term, Term, TypeSpec)]
// I don't use `Flatmap()` on `Vec<T>` because Formula does not support it and eventually  
// we want to model the languages in Formula
output relation ArgListOfTerm [(usize, List<Ref<Term>>, Term)]
output relation ArgOfTerm [(usize, Term, Term)]
// Variable in the direct arguments of a composite term, not recursively.
output relation VarOfTerm [(Term, Term)] 

// The position of a descendent term is specified by a list of indices over its ancestor.
output relation DescendentOfTerm [(Vec<usize>, Term, Term)]
// The position of a descendent variable term is specified by a list of indices over its ancestor.
output relation DescendentVarOfTerm [(Vec<usize>, Term, Term)]
output relation DescendentTermTypeSpec [(Vec<usize>, Term, Term, TypeSpec)]

output relation AnyTypeVarOfTerm [(Term, Term)] 

// It should contain both rule in the domain and rule in the set comprehension
input relation InputRule [Rule]
output relation Rule [Rule]
output relation SetcompreRule [Rule]
output relation NonSetcompreRule [Rule]

// The head of each constraint list cannot be null otherwise it's meaningless
output relation PosPredInRule [(Term, Ref<Rule>)]
output relation Var2PosPred[(Term, Term, Ref<Rule>)] 
output relation PosPred2Var[(Term, Term, Ref<Rule>)]

// Negative predicates can be directly use in `DDRule` as `not Pred(..)` or
// translated into set comprehension in `DDRule` rather than set difference depending on
// if the variables in negative term occur in the outer scope. 
output relation NegPredInRule [(Term, Ref<Rule>)]
output relation NegPredAsSetdiff[(Term, Ref<Rule>)]
output relation NegPredAsSetcompre[(Term, Ref<Rule>)]

// Track variables as variable terms in the positive predicates of a rule 
// TODO: How about the variables in set comprehension
output relation PosVarInRule [(Term, Ref<Rule>)]
// Track variables as variable terms in the negative predicates of a rule 
output relation NegVarInRule [(Term, Ref<Rule>)]

output relation HeadListInRule [(NonNullList<Term>, Ref<Rule>)] // Intermediate results because we use List
output relation HeadInRule[(Term, Ref<Rule>)]  
// the first item of usize is the unique index or id of the constraint
output relation ConstraintListInRule [(usize, NonNullList<Constraint>, Ref<Rule>)]
output relation ConstraintInRule [(usize, Constraint, Ref<Rule>)]

// Decide if the variable in predicates should be wrapped in `to_any()` or `from_any()`
// (constraint_position, variable_position, variable, term, rule_reference, conversion_enum)
output relation ConsVarConversion[(usize, Vec<usize>, Term, Term, Ref<Rule>, AnyTypeConversionEnum)]
// The position of the predicate in the head does not matter
output relation HeadVarConversion[(Vec<usize>, Term, Term, Ref<Rule>, AnyTypeConversionEnum)]

// The variable term in the rule to define Setcompre 
output relation DefTermOfSetcompre [(Term, Setcompre, Ref<Rule>)]
output relation OuterVarInDepSetcompre [(Term, Setcompre, Ref<Rule>)]
output relation Setcompre [(Setcompre, Ref<Rule>)]
output relation IndependentSetcompre [(Setcompre, Ref<Rule>)]
output relation DependentSetcompre [(Setcompre, Ref<Rule>)]

/******************** Rules *********************/
// Add all composite subterm from `InputTerm` into the `Term` relation
Term[term] :- InputTerm[term].
Rule[rule] :- InputRule[rule].

// A composite term is a subterm of itself and the type can be easily derived by checking the 
// the name of the constructor. Variable term and atom term are skipped in `SubtermTypeSpec` 
// relation because no context provided for a single variable term and the type of atom term
// can be directly obtained by calling function `atom_term_type()`.

// A composite term is a subterm of the term itself
SubtermTypeSpec[(c, c, t)] :- 
	c in Term[Composite{cons_name, arg_list}], 
	t in TypeSpec[CompositeType{cons_name, _}].

// TODO: What if the term has more than two variables with the same name but of different type?
SubtermTypeSpec[(arg, ancestor, arg_type_spec)] :- 
	SubtermTypeSpec[(term, ancestor, CompositeType{_, arg_types})], 
	ArgOfTerm[(index, arg, term)],
	var arg_type_spec = arg_types.nth(index).option_unwrap_or_default().type_spec.

// Find the direct argument of each composite term with index specified too.	
ArgListOfTerm[(0, arg_list, c)] :- c in Term[Composite{_, arg_list}].
ArgListOfTerm[(index+1, deref(nxt_arg_list), c)] :- ArgListOfTerm[(index, List {_, ListNxt {nxt_arg_list}}, c)].
ArgOfTerm[(index, deref(term_ref), c)], Term[deref(term_ref)] :- ArgListOfTerm[(index, List {term_ref, _}, c)].

DescendentOfTerm[(vec_singleton(index), arg, term)] :- ArgOfTerm[(index, arg, term)].
// e.g. T(a, T(a, b, a), T(Tm(a), b, c)) ->  `a` of Tm(a) and Tm(a) of T(Tm(a), b, c)
DescendentOfTerm[(index_vec, a, c)] :- DescendentOfTerm[(index_vec2, a, b)], DescendentOfTerm[(index_vec1, b, c)], 
	var index_vec = vec_concat(index_vec1, index_vec2).	

// Find the variables in the direct arguments of a composite term without digging into the arguments to find variables.
// T(a, b, c, d) is handled in this rule but not T(T1(a, b), T2(c, d)) and we recursively add subterms to the term collection
VarOfTerm[(variable, variable)] :- variable in Term[Variable{}].
VarOfTerm[(variable, term)] :- pair in ArgOfTerm[(_, Variable{}, term)], var variable = pair.1.

// Distinguish same variable but at different locations in a term. e.g. T(a, T(a, b, a), T(Tm(a), b, c))
// Find variables not in the arguments of current term but also its subterms.
// TODO: index by position or the order of occurance?
DescendentVarOfTerm[(vec_singleton(index), variable, term)] :- VarOfTerm[(variable, term)], ArgOfTerm[(index, variable, term)].
DescendentVarOfTerm[(index_vec1, variable, term)] :- DescendentVarOfTerm[(index_vec2, variable, descendent)], 
	DescendentOfTerm[(index_vec1, descendent, term)],
	var index_vec = vec_concat(index_vec1, index_vec2).	

DescendentTermTypeSpec[(indices, arg, term, arg_type_spec)] :- 
	TypeSpec[CompositeType{cons_name, arg_types}], 
	tuple in ArgOfTerm[(index, arg, Composite{cons_name, _})],
	var term = tuple.2,
	var arg_type_spec = arg_types.nth(index).option_unwrap_or_default().type_spec,
	var indices = vec_singleton(index).

DescendentTermTypeSpec[(index_vec, descendent, root, desc_type_spec)] :- 
	DescendentTermTypeSpec[(index_vec2, descendent, ancestor, desc_type_spec)], 
	DescendentTermTypeSpec[(index_vec1, ancestor, root, _)],
	var index_vec = vec_concat(index_vec1, index_vec2).	

// Only for debugging
DescendentTermTypeSpec[(index_vec, descendent, root, desc_type_spec)] :- 
	DescendentTermTypeSpec[(index_vec, descendent, root, desc_type_spec)],
	Inspect print("DescendentTermTypeSpec: ${descendent}, ${root}, ${desc_type_spec}")
	.

// // Find the variables that represent union type or Any type.
// AnyTypeVarOfTerm[(variable, term)] :- pair in ArgOfTerm[(_, Variable{}, term)], var variable = pair.1, 
// 	SubtermTypeSpec[(variable, term, UnionType{})].
// 	// Inspect print("Any type variable ${variable} in term ${term}").

HeadListInRule[(head_head, ref_new(r))] :- r in Rule[Rule {_, head_head, _}].
HeadListInRule[(deref(nxt_head), r)] :- HeadListInRule[(NonNullList {_, NonNullNxt { nxt_head }}, r)].
HeadInRule[(term, r)] :- HeadListInRule[(NonNullList {term, _}, r)].

// Return a collection of index, constraint and rule that contains the constraint
ConstraintListInRule[(0, constraint_head, ref_new(r))] :- r in Rule[Rule{ _, _, constraint_head }].
ConstraintListInRule[(index + 1, deref(nxt_constraint), r)] :- ConstraintListInRule[(index, NonNullList {_, NonNullNxt { nxt_constraint }}, r)].
ConstraintInRule[(index, constraint, r)] :- ConstraintListInRule[(index, NonNullList {constraint, _}, r)]. 

// Deal with the first predicate and every variable in it will be added as the first occurance.
// Because there are no previous predicates to match with the first predicate
// No conversion is needed no matter the variable is union type or other types.
// TODO: What if one predicate has a variable twice but with different types?
// e.g. BigEdge ::= new(src: Union, dst: Node) and the predicate is BigEdge(x, x)
// DDLog does not allow the same variable to be used more than once in the same predicate.
// We may have to write BigEdge[BigEdge{x, x}] as BigEdge[BigEdge{x1, x2}], x1 == x2, var x = x1.
// TODO: The subterm type needs to consider the position too.
ConsVarConversion[(0, indices, variable, pos_term, rule, NoConversion)] :-
	DescendentVarOfTerm[(indices, variable, pos_term)],
	ConstraintInRule[(0, PredCons {false, pos_term, _}, rule)].

// Find the first occurrence of the variable in predicates but the variable does not occur in previous predicates.
// head :- pred1, pred2, pred_m..., pred_n
// A variable occurs in pred_n but not in pred_m, pred_m occurs before pred_n.
ConsVarConversion[(index2, indices2, variable2, pos_term2, rule2, NoConversion)] :-
	ConstraintInRule[(index, PredCons {false, pos_term, _}, rule)],
	DescendentVarOfTerm[(indices, variable, pos_term)],
	// Inspect print("variable ${variable} in term ${pos_term}"),

    // BigEdge(a, d) :- BigEdge(a, b), BigEdge(b, c), BigEdge(c, d).
	// first a, b -> BigEdge(a, b)
	// first c -> BigEdge(a, b), BigEdge(b, c)
	// first d -> BigEdge(c, d)
	// None -> BigEdge(c, d)

	// Find all predicates and variables before a certain predicate
	ConstraintInRule[(pre_index, PredCons {false, pre_pos_term, _}, rule)],
	pre_index < index,
	DescendentVarOfTerm[(pre_indices, pre_variable, pre_pos_term)],

	// Find all variables in the previous predicates before the current predicate
	var pre_var_group = (pre_variable).group_by((index, indices, pos_term, variable, rule)),
	(var index2, var indices2, var pos_term2, var variable2, var rule2) = pre_var_group.group_key(),
	var variable_set = pre_var_group.to_hashset(),
	not hashset_contains(variable_set, variable2).


ConsVarConversion[(index, indices, variable, pos_term, rule, ToAny)] :-
	ConstraintInRule[(index, PredCons {false, pos_term, _}, rule)],
	DescendentVarOfTerm[(indices, variable, pos_term)],
	DescendentTermTypeSpec[(indices, variable, pos_term, UnionType{})],
	// Inspect print("variable ${variable} in term ${pos_term} with type ${subtype_tuple.2}"),
	// Find another predicate term that has the same variable in it but not union type.
	DescendentTermTypeSpec[(pre_indices, variable, pre_pos_term, non_union_type)],
	not is_union_type(non_union_type),
	ConsVarConversion[(pre_index, pre_indices, variable, pre_pos_term, rule, NoConversion)],
	pre_index < index.

// The first occurance of variable is of union type but the next one is not and we need to 
// convert from union type to regular type.
ConsVarConversion[(index, indices, variable, pos_term, rule, FromAny)] :-
	// The first occurance of variable that is born to be union type.
	ConsVarConversion[(pre_index, pre_indices, variable, pre_pos_term, rule, NoConversion)],
	DescendentTermTypeSpec[(pre_indices, variable, pre_pos_term, UnionType{})],
	// In the current predicate, the variable is not union type.
	ConstraintInRule[(index, PredCons {false, pos_term, _}, rule)],
	pre_index < index,
	DescendentVarOfTerm[(indices, variable, pos_term)],
	DescendentTermTypeSpec[(indices, variable, pos_term, non_union_type)],
	not is_union_type(non_union_type).


// Print out for debugging
ConsVarConversion[(index, indices, variable, term, rule, any_enum)] :-
	ConsVarConversion[(index, indices, variable, term, rule, any_enum)],
	Inspect print("ConsVarConversion tuple ${variable} in positive term ${term} at position ${index} of a rule ${rule.id} with enum ${any_enum}").


HeadVarConversion[(head_var_indices, variable, head_term, rule, ToAny)] :-
	HeadInRule[(head_term, rule)],
	DescendentVarOfTerm[(head_var_indices, variable, head_term)],
	DescendentTermTypeSpec[(head_var_indices, variable, head_term, UnionType{})],
	// Find the first occurrance of this variable in the body
	DescendentTermTypeSpec[(body_indices, variable, body_term, non_union_type)],
	not is_union_type(non_union_type),
	ConsVarConversion[(body_index, body_indices, variable, body_term, rule, NoConversion)].

HeadVarConversion[(head_var_indices, variable, head_term, rule, FromAny)] :-
	HeadInRule[(head_term, rule)],
	DescendentVarOfTerm[(head_var_indices, variable, head_term)],
	DescendentTermTypeSpec[(head_var_indices, variable, head_term, non_union_type)],
	not is_union_type(non_union_type),
	// Find the first occurrance of this variable of union type in the body
	DescendentTermTypeSpec[(body_indices, variable, body_term, UnionType{})],
	ConsVarConversion[(body_index, body_indices, variable, body_term, rule, NoConversion)].

// No conversion if the type of variable in the head is the same as the type of variable in the body.
HeadVarConversion[(head_var_indices, variable, head_term, rule, NoConversion)] :-
	HeadInRule[(head_term, rule)],
	DescendentVarOfTerm[(head_var_indices, variable, head_term)],
	DescendentTermTypeSpec[(head_var_indices, variable, head_term, var_type)],
	ConsVarConversion[(body_index, body_indices, variable, body_term, rule, NoConversion)],
	DescendentTermTypeSpec[(body_indices, variable, body_term, var_type)].


HeadVarConversion[(indices, variable, head_term, rule, any_enum)] :-
	HeadVarConversion[(indices, variable, head_term, rule, any_enum)],
	Inspect print("HeadVarConversion tuple ${variable} in ${head_term} of rule ${rule.id} with enum ${any_enum}").


// Add all terms that occur in the rule into the `Term` relation
Term[head_term] :- HeadInRule[(head_term, _)].
Term[pos_term], PosPredInRule[(pos_term, rule)] :- ConstraintInRule[(_, PredCons {false, pos_term, _}, rule)].
Term[neg_term], NegPredInRule[(neg_term, rule)] :- ConstraintInRule[(_, PredCons {true, neg_term, _}, rule)].

PosVarInRule[(variable, r)] :- PosPredInRule[(pos_term, r)], VarOfTerm[(variable, pos_term)].
// Note that in a positive predicate `x is Pred()` the alias `x` represents a variable too
PosVarInRule[(variable, r)] :- 
	ConstraintInRule[(_, PredCons {false, pos_term, Some{alias}}, r)],
	var variable = Variable { alias, vec_empty() }.

// Find all the positive predicates associated with a variable in the same rule
Var2PosPred[(variable2, each_term, rule2)]:- 
	// ConstraintInRule[(index, PredCons{negated, term, alias}, rule)], 
	PosPredInRule[(term, rule)],
	PosVarInRule[(variable, rule)], 
	VarOfTerm[(variable, term)],
	var term_group = (term).group_by((variable, rule)),
	(var variable2, var rule2) = term_group.group_key(),
	var term_set = term_group.group_to_set(),
	var each_term = FlatMap(term_set).

// Find all variables associated with a predicate in the same rule
PosPred2Var[(term2, each_var, rule2)] :-
	PosPredInRule[(term, rule)],
	PosVarInRule[(variable, rule)], 
	VarOfTerm[(variable, term)],
	var var_group = (variable).group_by((term, rule)),
	(var term2, var rule2) = var_group.group_key(),
	var var_set = var_group.group_to_set(),
	var each_var = FlatMap(var_set).


NegVarInRule[(variable, r)] :- NegPredInRule[(neg_term, r)], VarOfTerm[(variable, neg_term)].

// Check if any of the variables in the negated term occurs in the positive predicate term in the same rule
NegPredAsSetdiff[(neg_pred, r)] :- 
	NegPredInRule[(neg_pred, r)],
	PosVarInRule[(variable, r)], 
	NegVarInRule[(variable, r)], 
	VarOfTerm[(variable, neg_pred)].

NegPredAsSetcompre[(neg_pred, r)] :- NegPredInRule[(neg_pred, r)], not NegPredAsSetdiff[(neg_pred, r)].  

// Add inner rule of set comprehension back into the Rule relation
Rule[inner_rule],
SetcompreRule[inner_rule],
Setcompre[(setcompre, rule)], 
DefTermOfSetcompre[(def_term, setcompre, rule)] :-
	ConstraintInRule[(_, AssignCons{def_term, SetcompreExpr{setcompre_ref}}, rule)],
	var setcompre = deref(setcompre_ref),
	var inner_rule = deref(setcompre.rule).

// Use negation to derive all rules that are not from inside set comprehension
NonSetcompreRule[rule] :- Rule[rule], not SetcompreRule[rule].

DependentSetcompre[(setcompre, rule)], 
OuterVarInDepSetcompre[(shared_var, setcompre, rule)] :- 
	Setcompre[(setcompre, rule)],
	var sc_rule = setcompre.rule,
	// TODO: What about the negative variables in rules?
	PosVarInRule[(shared_var, sc_rule)], 
	PosVarInRule[(shared_var, rule)].

IndependentSetcompre[(setcompre, rule)] :- Setcompre[(setcompre, rule)], 
	not DependentSetcompre[(setcompre, rule)].

/***********************************************************/
/******* Helper Functions for Formula 2.0 Meta-model *******/
/***********************************************************/

function vec_concat(v1: Vec<'T>, v2: Vec<'T>): Vec<'T> {
	var mutable_vec = vec_with_capacity(v1.len() + v2.len());

	for (item in v1) {
		mutable_vec.push(item);
	};

	for (item in v2) {
		mutable_vec.push(item);
	};

    mutable_vec
}

function is_primitive_type(type_spec: TypeSpec): bool {
	match (type_spec) {
		Integer -> true,
		Boolean -> true,
		FloatNum -> true,
		String -> true,
		_ -> false
	}
}

function is_union_type(type_spec: TypeSpec): bool {
	match (type_spec) {
		UnionType {union_name, _} -> true,
		_ -> false
	}
}

function is_composite_type(type_spec: TypeSpec): bool {
	match (type_spec) {
		CompositeType {cons_name, _} -> true,
		ConstantType {constant} -> true,
		_ -> false
	}
}

function to_string(v: Vec<usize>): string {
	var indices_strs = map(v, |x| to_string(x));
	var str = "(" ++ indices_strs.join(", ") ++ ")";
	str
}

function to_string(any_enum: AnyTypeConversionEnum): string {
	match(any_enum) {
		FromAny -> {"from_any"},
		ToAny -> {"to_any"},
		NoConversion -> {"no_conversion"}
	}				
}

function to_string(type_spec: TypeSpec): string {
	match (type_spec) {
		Integer -> { "Int" },
		Boolean -> { "Bool" },
		FloatNum -> { "Float" },
		String -> { "String" },
		CompositeType {cons_name, _} -> { cons_name },
		UnionType {union_name, _} -> { union_name },
		ConstantType {constant} -> { constant },
		EnumType {enum_name, _} -> { enum_name }
	}
}

function to_string(term: Term): string {
	match (term) {
		AtomStr { str } -> str,
		AtomInt { i } -> to_string(i),
		AtomPosInt { i } -> to_string(i),
		AtomNegInt { i } -> to_string(i),
		AtomFloat { f } -> to_string(f),
		AtomBool { b } -> to_string(b),
		Variable { root, fragments } -> {
			if (vec_len(fragments) == 0) {
				root
			} else {
				root ++ "." ++ fragments.join(".")
			}
		},
		Composite { name, args} -> {
			var arg_str_list = list_map(args, |x| to_string(deref(x)));
			var arg_str_vec = into_vec(arg_str_list);
			var args_str = arg_str_vec.join(", ");
			name ++ "(" ++ args_str ++ ")"
		},
	} 
}
