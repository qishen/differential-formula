typedef Edge = Edge{src: Node, dst: Node}
typedef Graph_AUTOTYPE0 = Graph_AUTOTYPE0_usize{usize_field: usize} | Graph_AUTOTYPE0_string{string_field: string}
typedef Graph_AUTOTYPE1 = Graph_AUTOTYPE1_Node{node_field: Node} | Graph_AUTOTYPE1_usize{usize_field: usize}
typedef Graph_AUTOTYPE2 = Graph_AUTOTYPE2_Node{node_field: Node} | Graph_AUTOTYPE2_usize{usize_field: usize} | Graph_AUTOTYPE2_string{string_field: string}
typedef Line = Line{b: Node, c: Node, a: Node, d: Node}
typedef MagicEdge = MagicEdge{src: Graph_AUTOTYPE1, dst: Graph_AUTOTYPE2}
typedef Nocycle = Nocycle{node: Node}
typedef Node = Node{name: Graph_AUTOTYPE0}
typedef Outdegree = Outdegree{degrees: usize}
typedef OutdegreeByNode = OutdegreeByNode{node: Node, degrees: usize}
typedef Path = Path{src: Node, dst: Node}
typedef PostAggrContainerR0SC0Dot1 = PostAggrContainerR0SC0Dot1{src: Node, sc_result: SCResultR0SC0Dot1}
typedef PreAggrContainerR0SC0Dot1 = PreAggrContainerR0SC0Dot1{src: Node, sc_union: SCHeadUnionR0SC0Dot1}
typedef SCHeadUnionR0SC0Dot1 = SCHeadUnionR0SC0Dot1_Edge{edge_field: Edge} | SCHeadUnionR0SC0Dot1_Node{node_field: Node}
typedef SCResultR0SC0Dot1 = SCResultR0SC0Dot1_usize{usize_field: usize} | SCResultR0SC0Dot1_float{float_field: float}
typedef TwoEdge = TwoEdge{first: Edge, second: Edge}
output relation Edge[Edge]
output relation Graph_AUTOTYPE0[Graph_AUTOTYPE0]
output relation Graph_AUTOTYPE1[Graph_AUTOTYPE1]
output relation Graph_AUTOTYPE2[Graph_AUTOTYPE2]
output relation Line[Line]
output relation MagicEdge[MagicEdge]
output relation Nocycle[Nocycle]
output relation Node[Node]
output relation Outdegree[Outdegree]
output relation OutdegreeByNode[OutdegreeByNode]
output relation Path[Path]
output relation PostAggrContainerR0SC0Dot1[PostAggrContainerR0SC0Dot1]
output relation PreAggrContainerR0SC0Dot1[PreAggrContainerR0SC0Dot1]
output relation SCHeadUnionR0SC0Dot1[SCHeadUnionR0SC0Dot1]
output relation TwoEdge[TwoEdge]
input relation EdgeInput[Edge]
input relation Graph_AUTOTYPE0Input[Graph_AUTOTYPE0]
input relation Graph_AUTOTYPE1Input[Graph_AUTOTYPE1]
input relation Graph_AUTOTYPE2Input[Graph_AUTOTYPE2]
input relation LineInput[Line]
input relation MagicEdgeInput[MagicEdge]
input relation NocycleInput[Nocycle]
input relation NodeInput[Node]
input relation OutdegreeByNodeInput[OutdegreeByNode]
input relation OutdegreeInput[Outdegree]
input relation PathInput[Path]
input relation TwoEdgeInput[TwoEdge]
Edge[p] :- EdgeInput[p].
Graph_AUTOTYPE0[p] :- Graph_AUTOTYPE0Input[p].
Graph_AUTOTYPE1[p] :- Graph_AUTOTYPE1Input[p].
Graph_AUTOTYPE2[p] :- Graph_AUTOTYPE2Input[p].
Line[p] :- LineInput[p].
MagicEdge[p] :- MagicEdgeInput[p].
Nocycle[p] :- NocycleInput[p].
Node[p] :- NodeInput[p].
Outdegree[p] :- OutdegreeInput[p].
OutdegreeByNode[p] :- OutdegreeByNodeInput[p].
OutdegreeByNode[OutdegreeByNode{src, amt}] :- src in Node[Node{_}], PostAggrContainerR0SC0Dot1[PostAggrContainerR0SC0Dot1{src, amt}].
Path[p] :- PathInput[p].
PostAggrContainerR0SC0Dot1[PostAggrContainerR0SC0Dot1{src, result}] :- PreAggrContainerR0SC0Dot1[PreAggrContainerR0SC0Dot1{src, u}], var g = (u).group_by((src)), var result = g.group_count().
PreAggrContainerR0SC0Dot1[PreAggrContainerR0SC0Dot1{src, SCHeadUnionR0SC0Dot1_Edge{e}}], PreAggrContainerR0SC0Dot1[PreAggrContainerR0SC0Dot1{src, SCHeadUnionR0SC0Dot1_Edge{Edge{src, src}}}], PreAggrContainerR0SC0Dot1[PreAggrContainerR0SC0Dot1{src, SCHeadUnionR0SC0Dot1_Node{src}}] :- PostAggrContainerR0SC0Dot1[PostAggrContainerR0SC0Dot1{src, amt}], e in Edge[Edge{src, dst}], src in Node[Node{_}].
TwoEdge[p] :- TwoEdgeInput[p].
