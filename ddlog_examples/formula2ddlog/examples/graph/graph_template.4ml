domain Graph {
    Node ::= new(name: Integer + String).
    Edge ::= new(src: Node, dst: Node).
    MagicEdge ::= new(src: Node + Integer, dst: Node + Integer + String).
    Path ::= new(src: Node, dst: Node).
    Line ::= new(a: Node, b: Node, c: Node, d: Node).

    Nocycle ::= new(node: Node).
    TwoEdge ::= new(first: Edge, second: Edge).

    OutdegreeByNode ::= new(node: Node, degrees: Integer).
    Outdegree ::= new(degrees: Integer).

    Path(a, b) :- Edge(a, b).
    Path(a, c) :- Path(a, b), Path(b, c). 
    //Nocycle(u) :- Edge(u, v), no Path(u, u).
    Nocycle(u) :- u is Node(_), no Path(u, u).
    //HasNoCycle :- no Path(u, u).
    //OutdegreeByNode(src, amt) :- src is Node(_), amt = count({ e | e is Edge(src, dst) }). 
	// src :- e is Edge(src, dst).
    //Outdegree(amt) :- amt = count({ "hello", src, Edge(dst, src), Edge(src, dst) | e is Edge(src, dst) }). 
    //Outdegree(amt) :- amt * 2 > 10, amt = count({ src, Edge(dst, src), Edge(src, dst) | e is Edge(src, dst) }). 
    //MagicEdge(a, c) :- MagicEdge(a, b), MagicEdge(b, c).
    //Outdegree(amt) :- amt * 2 > 10, amt = count({ src, Edge(dst, src), Edge(src, dst) | e is Edge(src, dst), node_amt = count({ n | n is Node(x) }), node_amt > 1 }). 
    //Outdegree(amt) :- amt * 2 > 10, amt = count({ src, e | e is Edge(src, dst), node_amt = count({ n | n is Node(x) }), node_amt > 1 }). 
    //OutdegreeByNode(amt) :- amt * 2 > 10, Edge(src, x), amt = count({ dst, e, Edge(src, src), Node(88) | e is Edge(src, dst) }). 
}