// Generate ddlog runtime with std lib specified.
// Bash command: ddlog -i graph.dl -L ~/differential-datalog/lib/

// There is a bug in ddlog that type name cannot be single letter.
// input relation NN(id: u32)
// input relation EE(src: u32, dst: u32)

// typedef StrId = string
// typedef NumId = u32 
// typedef NID = StrId | NumId turns out to be two constants.
// Another bug here? Two constructors cannot have the same field name?
typedef NID = StrId {nid: string} | NumId {nnid: u32} | Constant1 | Constant2
typedef Null = Null {}
// You cannot derived new facts for input relation
// The workaround to emulate Formula is to create two relations for each type with a mapping rule.
// input relation NodeInput(id: u32)
// output relation Node(id: u32)

// input relation Node(id: u32) is actually syntax sugar. 
// typedef Node = Node {id: u32}
// Declare the relation by specifying it record type.
// input relation Node [Node] or input relation DummyNode [Node]
// DummyNode[node] :- Node[node], is_dummy(node).
input relation Node(id: usize)
input relation Edge(src: Node, dst: Node)
// Use Ref type to reduce memory allocation.
// TODO: Compare performance with native Edge in large graph.
input relation EdgeRef(src: Ref<Node>, dst: Ref<Node>)
output relation SelfCycleEdge[Edge]

// It will cause naming conflict and they will be treated as constants. 
// typedef Item = Node | Edge
// Must wrap them in constructors if you want enum of two defined types.
// typedef Item = ItemNode{node: Node} | ItemEdge{edge: Edge}

output relation TwoEdge(src: Edge, dst: Edge)
output relation Path(src: Node, dst: Node)
output relation Line(one: Node, two: Node, three: Node, four: Node)
output relation NoCycle(node: Node)

// output relation HasCycle(inner: bool)
typedef HasCycleConstant = HasCycleConstant {}
output relation HasCycle(inner: HasCycleConstant)

// Recurisve type defintion is supported too!
// Linked list of nodes with recursive type and NodeListNxt could be either `NodeList`
// or NULL to be terminated.
typedef NodeListNxt = Nxt {list: Ref<NodeList>} | NULL 
output relation NodeList(item: Node, next: NodeListNxt)

// Create a node list where a node points to itself as a self-linked list.
// we cannot use `nxt in Nxt()` because Nxt is not a relation but just a constructor.
// Node[node] or node in Node() are the same expression to access all items in the relation `Node` 
// in which the type of each item is also `Node` but different from relation `Node`.
// NodeList(node, next) :- node is Node(_), tail = NodeList(node, NULL), nxt = NodeList(node, tail).
NodeList(node, nxt) :- Node[node], var tail = NodeList{node, NULL}, var nxt = Nxt{ref_new(tail)}. 

// The rule order does not matter here.
// Path(a, c) :- Path(a, b), Path(b, c).
// Nested predicate is supported too
// Access arguments by either position or name but not mixed of both.
Path(Node{a}, Node{c}) :- Path(.src = Node{a}, .dst = Node{b}), Path(Node{b}, Node{c}).

// Add some additional constraints to the matches from predicate constraints  
// Path(Node{e}, Node{c}) :- Path(Node{a}, Node{b}), Path(Node{b}, Node{c}), var e = a + 100, c > 1.
// Constraint over attributes inside terms.
// Path(a, c) :- Path(a, b), Path(b, c), b.id != c.id.
Path(Node{a}, Node{b}) :- Edge(Node{a}, Node{b}). 

// Let's make a production rule.
// Production rule without additional constraints fails to compile?
// TwoEdge(Edge{Node{a}, b}, Edge{c, d}) :- Edge(Node{a}, b), Edge(c, d).
// TwoEdge(Edge{a, b}, Edge{c, d}) :- Edge(a, b), Edge(c, d), b == c.

// 1. Rule with negation to prove the absence of cycle in the database.
// Translate negation to set comprehension as count({p | p is Path(u, u)}) = 0 in Formula syntax.
// Group by () which means nothing means put everything into one group.
// Translate Formula rule in which the head is a boolean variable
// `HasCycle()` is a relation that has at most one item `HasCycle(HasCycleConstant)`
// Does not work if same variable occurs in predicate more than once.
// HasCycle(HasCycleConstant) :- Path(u, u), var g = u.group_by(()), 
//  				var count = g.group_count(), count == 0.
 HasCycle(HasCycleConstant) :- Path(u1, u2), u1 == u2, var g = u1.group_by(()), 
 				var count = g.group_count(), count == 0.

// 2. Rule with negation to do a set difference between two sets.
// set1 of Node[u] is a set of all existing nodes and set2 is a set of nodes that matched in Path(u, u).
// There are two ways to write the binding of variable `u` to records in `Node` relation:
// Node[u] or u in Node()
// u = Node(..) is not a constraint but a constructor to create new record thus does not accept variables
// that are not oriented from elsewhere in the current scope.
// NoCycle(u) :- u is Node(x), not Path(u, u).
NoCycle(u) :- u in Node[Node{x}], not Path(u, u).

// More than one term in the head. DDLog will create something like Multi(a, b, c) to 
// represent both head terms
// Path(a, b), Path(b, a) :- Edge(a, b).

// Let's do some simple aggregation in FORMULA.
output relation Outdegree(node: Node, count: usize)
// Calculate the outdegree for each node in the graph.
// In Formula, the outdegree can be written as 
// Outdegree(src, sum) :- src is Node(_), sum = count({ e | e is Edge(src, dst) }).
Outdegree(Node{src}, sum) :- Edge(Node{src}, Node{dst}), var sum = dst.group_by(src).group_count().  


// For each outgoing edge (x, y) from a cycle-free node, we count the number of outgoing edges
// starting from y and the count must be larger than a number so (x, y) can be added into the set
// of { x, y | condition } and the set will be further aggregated. 
// Ok, now we have a set of (x, y) pairs and we want to compute the sum of them but note that the 
// real set return from set comprehension is just a set of integers so we need to remove all duplicates
// before summing up.
// NodeIdSum(idsum) :- idsum = sum({ x, y | 
//		NoCycle(Node(x)), 
//		Edge(Node(x), Node(y)), 
//		count({ z, Node(z), Edge(Node(1), Node(z)), Edge(Node(z), Node(2)) | 
//			Edge(Node(y), Node(z)) 
//		}) > 4 
//})

// Pre-processing before aggregation: Create a collection of records that store outer scope variables
// and a union type of all types in the head of set comprehension.
// For terms in the head, we create a new union type to represent them and a new relation to hold
// a collection of records of the tagged union type.
typedef HeadTermUnion = HeadInt {num: usize} | HeadNode {node: Node} | HeadEdge {edge: Edge}
// A container to hold variables from outer scope and all records derived in the head of the set comprehension
typedef AggrPreprocessContainer = AggrPreprocessContainer {x: usize, y: usize, union: HeadTermUnion} 
output relation AggrPreprocessContainer [AggrPreprocessContainer]
// If we don't use union type and do aggregation for each type term in the head separately then things
// could go wrong because Edge(Node(1), Node(z)) and Edge(Node(z), Node(2)) may produce the same edge
// Edge(1, 2) and be counted twice.
AggrPreprocessContainer(x, y, HeadInt{z}), 
AggrPreprocessContainer(x, y, HeadNode{Node{z}}), 
AggrPreprocessContainer(x, y, HeadEdge{Edge{Node{1}, Node{z}}}), 
AggrPreprocessContainer(x, y, HeadEdge{Edge{Node{z}, Node{2}}}) :- 
	NoCycle(Node{x}), Edge(Node{x}, Node{y}), Edge(Node{y}, Node{z}).

// The union type for outer set comprehension sum({x, y| conditions}) and it is actually not union
// type because the head terms only have integer type so we can do sum.
typedef HeadTermUnion2 = HeadInt2 {num: usize}
// No variables from outer scope and just {x, y} from the head.
typedef AggrPreprocessContainer2 = AggrPreprocessContainer2 {union: HeadTermUnion2}
output relation AggrPreprocessContainer2 [AggrPreprocessContainer2]
AggrPreprocessContainer2(HeadInt2{xx}), AggrPreprocessContainer2(HeadInt2{yy}) :- AggrPreprocessContainer(x, y, h),
		// Group by variables from the outer scope.
		var g = h.group_by((x, y)), 
		// Keep the variables from outer scope otherwise they are consumed into inner scope.
		(var xx, var yy) = g.group_key(),
		// Reduce each group by count
		var count = g.group_count(), count > 1.

output relation NodeIdSum(sum: usize)
// Group by nothing so it returns a group that has all integers in the set.
NodeIdSum(sum) :- AggrPreprocessContainer2(HeadInt2{num}), var sum = num.group_by(()).group_sum().

// Let's make a little change to connect set comprehension with each cycle-free node from outer scope.
// The difference from previous nested aggregation is that we are doing set comprehension for each
// separate x and also we can move `NoCycle(Node(x))` to the outer scope without changing the semantic
// NodeIdSum(x, idsum) :- Node(x), idsum = sum({ x, y | 
//		NoCycle(Node(x)), 
//		Edge(Node(x), Node(y)), 
//		count({ z, Node(z), Edge(Node(1), Node(z)), Edge(Node(z), Node(2)) | 
//			Edge(Node(y), Node(z)) 
//		}) > 4 
//})
typedef HeadTermUnion3 = HeadInt3 {num: usize}
// Store outer scope variable x and the head terms in set comprehension. 
typedef AggrPreprocessContainer3 = AggrPreprocessContainer3 {x: usize, union: HeadTermUnion3}
output relation AggrPreprocessContainer3 [AggrPreprocessContainer3]
AggrPreprocessContainer3(x, HeadInt3{x}), AggrPreprocessContainer3(x, HeadInt3{y}) :- 
	AggrPreprocessContainer(x, y, h). 

output relation NodeIdSumByX(node: Node, sum: usize)
NodeIdSumByX(Node{xx}, sum) :- AggrPreprocessContainer3(x, HeadInt3{h}),
	var g = h.group_by(x),
	var xx = g.group_key(),
	var sum = g.group_sum().


// Mutually recursive rules
// program::ProgNode::SCC{rels: vec![
//     program::RecursiveRelation{rel: Path, distinct: true}, 
//     program::RecursiveRelation{rel: Line, distinct: true}
// ]},
// Both `Path` and `Line` are put into an inner scope of loop that keeps deriving
// new facts until fix point reached.
// Path(a, b) :- Edge(a, b).
// Line(a, b, a, b) :- Path(a, b).
// Path(b, b) :- Line(a, b, c, d).

// Rules that look dependent but actually not because of the semantics of the predicates
// Without type inference we would think R1 is dependent on R2 because R1 requires all `Path`
// to be derived in R2 before execution of rule R1.
// Actually Path(Node{1}, x) and Path(Node{2}, y) represent different subsets of terms in `Path`
// so R1 and R2 are independent because new facts of Path(1, x) from R2 does not affect matching of 
// Path(2, x) in R1.

// R1:
// Line(x, x, x, x) :- Path(2, x).
// can be written as
// Line(x, x, x, x) :- Path2x(x).

// R2:
// Path(1, x) :- Edge(x, x).
// can be written as
// Path1x(x) :- Edge(x, x). 

// Behind the scene we generate new types and relations.
// output relation Path2x(dst: Node)
// can be de-sugared to Path2x [Path2x] and typedef Path2x = { dst: Node }
// Or we can create a new relation for `Node` as Path2x [Node] 


// Join multiple predicates in the rule body and can we do some worst case optimal joins?
// TODO: Check how ddlog schedules the joins. 
// 1. Join Edge(a, b), Edge(b, c) into (c, a, b) and each one is DDValue
// Arrange Edge(a, b), Edge(b, c) by c as (c, (c, a, b)) 
// 2. Join Edge(a, b), Edge(b, c), Edge(c, d) into (d, c, a, b)
// Arrange it by d as (d, (d, c, a, b))
// Path(a, e) :- Edge(a, b), Edge(b, c), Edge(c, d), Edge(d, e), b == c + 2.
// Path(a, c) :- Path(a, b), Path(b, c).
// NoCycle(u) :- Edge(_, u), not Path(u, u).